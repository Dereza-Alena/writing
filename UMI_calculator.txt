<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
import flash.events.MouseEvent;
	

	private var enterNumber:CalculateAll = new CalculateAll(); // для ввода с клавиатуры
	public var buttonNumber:CalculateAll = new CalculateAll(); // для ввода с визуальных кнопок
	private var smthing:MyNewClass = new MyNewClass();
	//public var addition:Number = 3;
		
		/*
		  * Обнуляется значения массивов: 
					buttonNumber.arrayCurrent  
					buttonNumber.arrayMemory
					buttonNumber.resultArray
					enterNumber.arrayCurrent
					enterNumber.arrayMemory
					enterNumber.resultArrayInputArcs
		 * */		
		public function onButtonC(event:MouseEvent):String // при нажати кнопки С чистка значений элементов массива
		{
			/*buttonNumber.arrayCurrent.splice(0); //чищу все  массивы  
			buttonNumber.arrayMemory.splice(0);
			buttonNumber.resultArrayInputArcs.splice(0);*/
			
			enterNumber.arrayCurrent.splice(0);
			enterNumber.arrayOutputArcs.splice(0);
			enterNumber.arrayInputArcs.splice(0);
			enterNumber.arrayMemory.splice(0);
			enterNumber.resultArrayInputArcs.splice(0);
			arcs.text = " ";
			
			trace("enterNumber.arrayMemory after C = " + enterNumber.arrayMemory);
			trace("enterNumber.resultArrayInputArcs after C = " + enterNumber.resultArrayInputArcs);
			trace("var arrayCurrent of enterNumber obj after C = " + enterNumber.arrayCurrent);
			trace("var arrayOutputArcs of enterNumber obj after C = " + enterNumber.arrayOutputArcs);
			trace("var arrayInputArcs of enterNumber obj after C = " + enterNumber.arrayInputArcs);
			return result.text = "Нажмите на нижнее поле ввода и введите с клавиатуры значения дуг инцидентности в формате p,t,n,...";
		}
		
				/* при нажати кнопки + 
				 * осуществить логическое сложение строк МИ находящихся во временном отношении тау+/тау-*/
		public function onButtonPlus(event:MouseEvent):String 
		{
			return result.text  =  " ";
		}
		
		/* при нажати кнопки -  обнулить по-элементно вводимый текст в current*/
		public function onButtonMinus(event:MouseEvent):String 
		{
			trace("var arrayMemory of buttonNumber obj before =" + buttonNumber.arrayMemory);
			trace("var arrayMemory of enterNumber obj before =" + enterNumber.arrayMemory);

			return result.text  =  "-";
			
		}
		
		/*public function setEnter(event:flash.events.Event):void // при нажатии на окно ввода(правое)
		{
			//<s:TextInput x="250" y="30" id="enter" change ="setEnter(event)" /> 
			enter.text = enterNumber.getCurrent().toString(); // над объектом enterNumber вызывается метод из его класса и преобразуется в строку
			enter.text +=  smthing.doSomething();
		}*/
		/*Окно ввода первое*/
		public function inEnterPlus(event:flash.events.Event):void 
		{
			result.text = "Нажмите на второе окно и введите с клавиатуры значения дуг инцидентности в формате p,t,n,...";
			
		}
		
				/*
				 * Для УМИ: 
					при вводе цифр с клавиатуры запоминает в массив enterNumber.arrayCurrent,  
					отображает в строке калькулятора!! на 30.07.18.
					
				*/
		public function arcsEnter(event:flash.events.Event):void 
		{
			enterNumber.arrayCurrent.push(arcs.text);// вводит и запоминает в массив данные ввода с клавиатуры
			arcs.text = " ";//позволяет запоминать по одной цифре в ячейку массива
			result.text = enterNumber.arrayCurrent.toString();
			trace(" enterNumber.arrayCurrent =  " + enterNumber.arrayCurrent);
		}
		
				/*
				  запоминаю в массив Aij+ массив Current,
				  потом очищаю arrayCurrent,
				  обнуляю текст в обоих окнах ввода
			  Дальше -- Визуализация:Сделать картинку матрицы, картинки кнопок
			  */
		public function OutputArcs(event:MouseEvent):String
		{
			for (var i:int = 0; i < enterNumber.arrayCurrent.length; i++) 
			{
			enterNumber.arrayOutputArcs[i] = enterNumber.arrayCurrent[i];
			}
			trace("Значение массива arrayCurrent = " + enterNumber.arrayCurrent);
			trace("Значение массива связности дуг arrayOutputArcs = " + enterNumber.arrayOutputArcs);
			result.text = "значения Аij+ сохранены ";
			enterNumber.arrayCurrent.splice(0);
			trace("Значение массива arrayCurrent = " + enterNumber.arrayCurrent);
			trace("Значение массива связности дуг arrayOutputArcs = " + enterNumber.arrayOutputArcs);
			trace("Значение массива дуг предшествования arrayInputArcs = " + enterNumber.arrayInputArcs);
			
			return arcs.text  =  " ";
		}
		
				/*
				  запоминаю в arrayInputArcs в массив Current, 
				  потом очищаю arrayCurrent,
				  обнуляю текст в обоих окнах ввода
				  */
		public function InputArcs(event:MouseEvent):String
		{
			for (var i:int = 0; i < enterNumber.arrayCurrent.length; i++) 
			{
			enterNumber.arrayInputArcs[i] = enterNumber.arrayCurrent[i];//непосредственное копирование данных
			}
			enterNumber.arrayCurrent.splice(0);
			trace("Длина массива Current после метода splice"+ enterNumber.arrayCurrent.length)
			trace("Значение массива arrayCurrent = " + enterNumber.arrayCurrent);
			trace("Значение массива дуг предшествования arrayInputArcs = " + enterNumber.arrayInputArcs);
			trace("Значение массива связности дуг arrayOutputArcs = " + enterNumber.arrayOutputArcs);
			
			result.text = "значения Аij- сохранены";
			return arcs.text  =  " ";
		}
		/*
		Кнопка для поиска разделяемого ресурса в массиве arrayInputArcs
		промежуточный результат arrayInputArcs для дальнейшего поиска семафоров и 
		одновременности в массиве Memory, 
		в ArrayResult найденные разделяемые ресурсы (тройки) 
		*/
		public function RazdelResurs(event:MouseEvent):String
		{
			//var addition:Number = 3;
			/*Дублирую массив дуг arrayInputArcs в массив arrayMemory*/
			for (var k:int = 0; k < enterNumber.arrayInputArcs.length; k++) 
			{
				enterNumber.arrayMemory[k] = enterNumber.arrayInputArcs[k];
			}
			
			/*цикл с 0ого элемента массива*/
			for (var i:int = 0; i < enterNumber.arrayMemory.length; i++)
			{
				trace("Начало тела цикла i в поиске раздел ресурса ");
				trace("Текущее значение i = " + i);
				/*проверка на наличие данных в элементе с которым будем сравнивать */
				switch (enterNumber.arrayMemory[i+enterNumber.addition]) 
				{
					case undefined:
					trace("Проверен весь массив arrayMemory на сравнение с i-м элементом, текущее i =" + i);	
					break;
					
				default:
					/*цикл сравнения элементов с  i-м, начиная с номера j (следующего места)
					 * как только найдем одинаковую пару, i-ый элемент(кортеж) записывается в ResultArray и заменяется на RR, 
					 * j тоже записывается в ResultArray при этом удаляясь из arrayMemory*/
					for	(var j:int = i+enterNumber.addition; j < enterNumber.arrayMemory.length; j++)
					{
						trace("Начало тела цикла j в поиске раздел ресурса ");
						trace("Текущее значение j = " + j);
						
						if(Number(enterNumber.arrayMemory[i]) != Number(enterNumber.arrayMemory[j]))
						{
							trace("!= ветка найденны неравные значения в arrayMemory[i] " + Number(enterNumber.arrayMemory[i]));
							trace("!= ветка найденны неравные значения в arrayMemory[j] " + enterNumber.arrayMemory[j]);
						
							j += 2;
							trace("Текущее значение i = " + i);
							trace("Текущее значение j = " + j);
							trace("Переход к следующему элементу цикла j");
						}
						else /*найден второй одинаковый элемент== i - разделяемый ресурс
								удаляю его методом splice и push в resultArray(укорачиваю количество исследуемых элементов в цикле i и j),
								исходный элемент с которым сравниваю, запоминаю сразу, enterNumber.arrayMemory[i]
								заменяю его на RR, чтобы не потерять корректность индексов в цикле i*/
						{
							enterNumber.resultArrayInputArcs.push(enterNumber.arrayMemory[i]); //запомнила первый кортеж из пары одинаковых 
							enterNumber.resultArrayInputArcs.push(enterNumber.arrayMemory[i+1]);
							enterNumber.resultArrayInputArcs.push(enterNumber.arrayMemory[i+2]);
							enterNumber.arrayMemory.splice(i, enterNumber.addition, "RR", "RR", "RR");//поменяла первую тройку разд.рес.
							enterNumber.resultArrayInputArcs.push(enterNumber.arrayMemory.splice(j, enterNumber.addition));//запомнила удаленную найденную тройку разд.рес.
							trace("else enterNumber.resultArray после push enterNumber.arrayMemory.splice(j, addition)" + enterNumber.resultArrayInputArcs );
							trace("else enterNumber.arrayMemory после splice(i, addition, RR)" + enterNumber.arrayMemory );
							
							j += 2;
							trace("после j += 2; Текущее значение i = " + i);
							trace("после j += 2; Текущее значение j = " + j);
							trace("Переход к следующему элементу цикла j");
							
						}
					}
					trace("Конец тела цикла j");
				}
				i += 2;
				trace("Текущее значение i = " + i);
				trace("Конец тела цикла i");
			}
			/*Делаю 07.08.18: проверка на !=0 resultArrayInputArcs, 
			 * поиск и удаление из массива resultArrayOutputArcs
			 * соответствующих р.р. связей*/
			if(Number(enterNumber.resultArrayInputArcs) != 0)
			{
			trace("resultArrayInputArcs не пуст");	
			}
			else
			{
			trace("resultArrayInputArcs пуст");		
			}
			result.text = enterNumber.resultArrayInputArcs.toString();
			trace(" enterNumber.resultArrayInputArcs после проверки на р.р." + enterNumber.resultArrayInputArcs );
			trace(" enterNumber.arrayMemory после проверки на р.р." + enterNumber.arrayMemory );
			trace(" enterNumber.arrayInputArcs после проверки на р.р." + enterNumber.arrayInputArcs );
			return result.text  +=  " = результат поиска разделяемых ресурсов";
		}
		/*
		Кнопка для поиска семафоров в массивах arrayOutputArcs и arrayInputArcs
		добавляет в массив ResultInput/ResultOutput найденные семафоры, промежуточная память
		в массив Current запоминаю массив с максимальной длиной, другой массив в MemoryArray
		*/
		public function Semaph(event:MouseEvent):String
		{
			
			//arcs.text  =  " ";
			trace("Значение массивов дуг предшествования arrayInputArcs = " + enterNumber.arrayInputArcs);
			trace("Значение массивов дуг следования arrayOutputArcs = " + enterNumber.arrayOutputArcs);
			return result.text = "+";//вывод на экран результатов
		}
		
		/*
		Кнопка для поиска синхронизируемых событиями ресурсов в массивах arrayOutputArcs и arrayInputArcs
		выводит в массив Memory 
		*/
		public function Odnovremennost(event:MouseEvent):String
		{
			trace("Значение массивов дуг предшествования arrayInputArcs = " + enterNumber.arrayInputArcs);
			trace("Значение массивов дуг следования arrayOutputArcs = " + enterNumber.arrayOutputArcs);
			return arcs.text  =  "поиск синхронизируемых ресурсов";
		}


		]]>
	</fx:Script>
	
	
	
	<s:Button x="0" y="30" label="C" click="onButtonC(event)" />
	<s:Button x="80" y="30" label="+" click="onButtonPlus(event)" />
	<s:Button x="160" y="30" label="-" click="onButtonMinus(event)" />
	<s:TextInput x="0" y="0" width="600" id="result" change ="inEnterPlus(event)" />
	
	<s:TextInput x="10" y="180" width="600" id="arcs" change ="arcsEnter(event)" /> 
	<s:Button x="10" y="220" label="ij+" click="OutputArcs(event)" />
	<s:Button x="80" y="220" label="ij-" click="InputArcs(event)" />
	<s:Button x="10" y="250" label="Rho" click="RazdelResurs(event)" />
	<s:Button x="80" y="250" label="Sigma" click="Semaph(event)" />
	<s:Button x="150" y="250" label="Tau" click="Odnovremennost(event)" />
		
		
	
</s:WindowedApplication>